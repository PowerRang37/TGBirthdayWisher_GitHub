import asyncio
import random
import aiohttp
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

TOKEN = '6139048926:AAGCuYYyXhjK9Tg0wlsdchaWi1zLHOXOjbA'
GROUP_CHAT_ID = '-1001380011085'
#My_GROUP_CHAT_ID = '-1001591926639'

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ‚úÖ List of people who can collect money
collectors = [
    "@Pow37Rang37", "@tupacalyps3", "@Dnkzgfx", "@ibakiyev",
    "@nurbeha", "@NurlybekTheGreat", "@ValerieT",
    "@zharenaya_kartoha", "@Pepe33333", "@vvinter999",
    "@Disagyndykov", "@zh_batyrbek", "@Elmenski", "@shulenov",
    "@moontuar", "@nargiz_nurly", "@dava1616"
]

# ‚úÖ List of people **excluded** from money collection selection
excluded_from_collection = [
    "@Disagyndykov", "@zh_batyrbek",
    "@Elmenski", "@shulenov", "@moontuar", "@nargiz_nurly", "@dava1616"
]

# ‚úÖ Dictionary of names and their birthdates (format: DD-MM)
birthdays = {
    "Pow37Rang37": "27-02",
    "tupacalyps3": "05-09",
    "Dnkzgfx": "18-07",
    "ibakiyev": "25-08",
    "nurbeha": "13-11",
    "NurlybekTheGreat": "15-02",
    "ValerieT": "13-01",
    "zharenaya_kartoha": "16-11",
    "Pepe33333": "14-06",
    "vvinter999": "26-03",
    "Disagyndykov": "01-09",
    "zh_batyrbek": "16-01",
    "moontuar": "03-04",
    "shulenov": "10-02",
    "Elmenski": "17-04",
    "nargiz_nurly": "08-06",
    "dava1616": "16-11"
}

def normalize_username(username):
    return username.lstrip('@').lower()

def generate_birthday_message(name):
    tagged_name = f"@{name}"
    messages = [
        f"üéâ –° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, {tagged_name}! üéÇüéà –ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Å—á–∞—Å—Ç—å–µ–º –∏ —Å–º–µ—Ö–æ–º! ü•≥",
        f"ü•≥ –ñ–µ–ª–∞—é —Ç–µ–±–µ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è, {tagged_name}! üéÅ –ù–∞–¥–µ—é—Å—å, –≤–ø–µ—Ä–µ–¥–∏ —Ç–µ–±—è –∂–¥–µ—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å! üéä",
        f"üéÇ {tagged_name}, —ç—Ç–æ —Ç–≤–æ–π –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å! üéà –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∫–∞–∂–¥—ã–º –º–≥–Ω–æ–≤–µ–Ω–∏–µ–º –∏ —Å–æ–∑–¥–∞–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è! ü•∞",
        f"üåü –° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, {tagged_name}! –ü—É—Å—Ç—å –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π –≥–æ–¥ –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π, —É—Å–ø–µ—Ö–∞ –∏ —Ä–∞–¥–æ—Å—Ç–∏! üéâ",
        f"üéä –ó–∞ —Ç–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ, {tagged_name}! ü•Ç –ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ —Å—á–∞—Å—Ç—å–µ, –ª—é–±–æ–≤—å –∏ –≤—Å–µ, –æ —á–µ–º –º–µ—á—Ç–∞–µ—Ç —Ç–≤–æ–µ —Å–µ—Ä–¥—Ü–µ! üíñ"
    ]
    return random.choice(messages)

async def fetch_joke():
    url = "https://official-joke-api.appspot.com/jokes/random"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                joke_data = await response.json()
                return f"{joke_data['setup']} {joke_data['punchline']}"
            else:
                return "Failed to fetch a joke. Try again later."

@dp.message(Command("joke"))
async def send_joke(message: types.Message):
    joke = await fetch_joke()
    await message.answer(joke)

async def check_birthdays():
    today = datetime.today().strftime('%d-%m')
    birthdays_today = [name for name, bday in birthdays.items() if bday == today]

    if not birthdays_today:
        print("üìÖ No birthdays today.")
        return

    for name in birthdays_today:
        tagged_name = f"@{name}"
        birthday_message = generate_birthday_message(name)

        try:
            await bot.send_message(GROUP_CHAT_ID, birthday_message)
            print(f"‚úÖ Birthday message sent: {birthday_message}")

            if normalize_username(name) not in [normalize_username(x) for x in excluded_from_collection]:
                available_collectors = [
                    collector for collector in collectors
                    if collector.lower() != f"@{name.lower()}" and
                       normalize_username(collector) not in [normalize_username(x) for x in excluded_from_collection]
                ]
                selected_collector = random.choice(available_collectors) if available_collectors else "No available collector"

                collection_message = (
                    f"–ü—Ä–∏–≤–µ—Ç, {selected_collector}! –¢–≤–æ—è –º–∏—Å—Å–∏—è: —Å–æ–±—Ä–∞—Ç—å –ø–æ 5000 —Ç–≥ —Å –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è {tagged_name}. –ü—Ä–æ—à—É –ø—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É.")
                
                await bot.send_message(GROUP_CHAT_ID, collection_message)
                print(f"‚úÖ Collection request sent: {collection_message}")

        except Exception as e:
            print(f"‚ùå Failed to send message: {e}")

async def main():
    await check_birthdays()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bot is off")
